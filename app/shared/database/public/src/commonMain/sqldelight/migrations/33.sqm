import build.wallet.bitkey.app.AppGlobalAuthPublicKey;
import build.wallet.bitkey.app.AppRecoveryAuthPublicKey;
import build.wallet.bitkey.app.AppSpendingPublicKey;
import build.wallet.bitkey.f8e.F8eSpendingPublicKey;
import build.wallet.bitkey.f8e.FullAccountId;
import build.wallet.bitkey.factor.PhysicalFactor;
import build.wallet.bitkey.hardware.HwAuthPublicKey;
import build.wallet.bitkey.hardware.HwSpendingPublicKey;
import build.wallet.cloud.backup.csek.SealedCsek;
import kotlin.Boolean;
import kotlinx.datetime.Instant;

-- Persist App Recovery Auth Key when initiating and completing a DN recovery.
-- Adds `AppRecoveryAuthPublicKey` field to `activeServerRecoveryEntity` and `localRecoveryAttemptEntity`.
-- Also, renames `destinationAppAuthKey` field to `destinationAppGlobalAuthKey` for consistency with the codebase.

-- Note that the Recovery Auth key is optional. It's possible that the customer has not
-- initiated DN recovery by providing an existing/new Recovery Auth key because they
-- started the recovery in older app version. The recovery will proceed nonetheless,
-- and the Recovery Auth key will be backfilled later (see BKR-573).

-- 1. Create table with new schema for `activeServerRecoveryEntity`
CREATE TABLE activeServerRecoveryEntity_new(
  rowId                         INTEGER NOT NULL PRIMARY KEY,
  account                       TEXT AS FullAccountId NOT NULL,
  startTime                     INTEGER AS Instant NOT NULL,
  endTime                       INTEGER AS Instant NOT NULL,
  lostFactor                    TEXT AS PhysicalFactor NOT NULL,
  destinationAppGlobalAuthKey   TEXT AS AppGlobalAuthPublicKey NOT NULL,
  destinationAppRecoveryAuthKey TEXT AS AppRecoveryAuthPublicKey,
  destinationHardwareAuthKey    TEXT AS HwAuthPublicKey NOT NULL
);

-- 2. Migrate data over from existing `activeServerRecoveryEntity` table
INSERT INTO activeServerRecoveryEntity_new
SELECT
    rowId,
    account,
    startTime,
    endTime,
    lostFactor,
    destinationAppAuthKey,
    NULL,
    destinationHardwareAuthKey
FROM activeServerRecoveryEntity;

-- 3. Drop old table `activeServerRecoveryEntity`
DROP TABLE activeServerRecoveryEntity;

-- 4. Rename new table `activeServerRecoveryEntity`
ALTER TABLE activeServerRecoveryEntity_new RENAME TO activeServerRecoveryEntity;

-- 5. Create table with new schema for `localRecoveryAttemptEntity`
CREATE TABLE localRecoveryAttemptEntity_new(
  rowId                           INTEGER NOT NULL PRIMARY KEY,
  account                         TEXT AS FullAccountId NOT NULL,
  destinationAppGlobalAuthKey     TEXT AS AppGlobalAuthPublicKey NOT NULL,
  destinationAppRecoveryAuthKey   TEXT AS AppRecoveryAuthPublicKey,
  destinationHardwareAuthKey      TEXT AS HwAuthPublicKey NOT NULL,
  destinationAppSpendingKey       TEXT AS AppSpendingPublicKey NOT NULL,
  destinationHardwareSpendingKey  TEXT AS HwSpendingPublicKey NOT NULL,
  lostFactor                      TEXT AS PhysicalFactor NOT NULL,
  hadServerRecovery                INTEGER AS Boolean NOT NULL,
  sealedCsek                      BLOB AS SealedCsek,
  authKeysRotated                 INTEGER AS Boolean NOT NULL,
  serverKeysetId                  TEXT,
  serverSpendingKey               TEXT AS F8eSpendingPublicKey,
  backedUpToCloud                 INTEGER AS Boolean NOT NULL
);

-- 6. Migrate data over from existing `localRecoveryAttemptEntity` table
INSERT INTO localRecoveryAttemptEntity_new
SELECT
    rowId,
    account,
    destinationAppAuthKey,
    NULL, -- destinationAppRecoveryAuthKey
    destinationHardwareAuthKey,
    destinationAppSpendingKey,
    destinationHardwareSpendingKey,
    lostFactor,
    hadServerRecovery,
    sealedCsek,
    authKeysRotated,
    serverKeysetId,
    serverSpendingKey,
    backedUpToCloud
FROM localRecoveryAttemptEntity;

-- 7. Drop old table `localRecoveryAttemptEntity`
DROP TABLE localRecoveryAttemptEntity;

-- 8. Rename new table `localRecoveryAttemptEntity`
ALTER TABLE localRecoveryAttemptEntity_new RENAME TO localRecoveryAttemptEntity;

-- 9. Run foreign key check
PRAGMA foreign_key_check;
