-- Create Full Account database table abstraction instead of using Keybox tables.
-- Up until now we have been using `keyboxEntity`, `activeKeyboxEntity` and `onboardingKeyboxEntity`
-- to determine the state of the Full Account - `Keybox` tables have been used as the primary source
-- of truth. This migration inverts this relationship at database level by adding Full Account tables
-- and using them as the source of truth for Full Account state in the app.

-- 1. Create Full Account tables
CREATE TABLE fullAccountEntity(
  accountId           TEXT AS FullAccountId NOT NULL PRIMARY KEY,
  keyboxId            TEXT NOT NULL,
  -- Note that this is a new, optional field used by Full Accounts.
  -- Will be backfilled in code.
  appRecoveryAuthKey TEXT AS AppRecoveryAuthPublicKey,
  FOREIGN KEY (keyboxId) REFERENCES keyboxEntity(id)
);

CREATE TABLE activeFullAccountEntity(
  rowId      INTEGER NOT NULL PRIMARY KEY,
  accountId  TEXT AS FullAccountId NOT NULL,
  FOREIGN KEY (accountId) REFERENCES fullAccountEntity(accountId)
);

CREATE TABLE onboardingFullAccountEntity(
  rowId     INTEGER NOT NULL PRIMARY KEY,
  accountId  TEXT AS FullAccountId NOT NULL,
  FOREIGN KEY (accountId) REFERENCES fullAccountEntity(accountId)
);

-- 2. Migrate to use Full Account tables instead of Keybox tables
INSERT INTO fullAccountEntity
SELECT account, id, NULL
FROM keyboxEntity;

INSERT INTO activeFullAccountEntity(rowId, accountId)
SELECT 0, keyboxEntity.account
FROM keyboxEntity
INNER JOIN activeKeyboxEntity ON keyboxEntity.id = activeKeyboxEntity.keyboxId;
    
INSERT INTO onboardingFullAccountEntity(rowId, accountId)
SELECT 0, keyboxEntity.account
FROM keyboxEntity
INNER JOIN onboardingKeyboxEntity ON keyboxEntity.id = onboardingKeyboxEntity.keyboxId;

-- 3. Create new `fullAccountView`
CREATE VIEW fullAccountView AS
SELECT
  fullAccountEntity.accountId AS accountId,
  fullAccountEntity.appRecoveryAuthKey AS appRecoveryAuthKey,
  keyboxEntity.id AS keyboxId,
  keyboxEntity.inactiveKeysetIds,
  keyboxEntity.networkType,
  keyboxEntity.fakeHardware,
  keyboxEntity.f8eEnvironment,
  keyboxEntity.isTestAccount,
  keyboxEntity.isUsingSocRecFakes,
  keyboxEntity.delayNotifyDuration,
  spendingKeysetEntity.id AS spendingPublicKeysetId,
  spendingKeysetEntity.serverId AS spendingPublicKeysetServerId,
  spendingKeysetEntity.appKey,
  spendingKeysetEntity.hardwareKey,
  spendingKeysetEntity.serverKey,
  appKeyBundleEntity.id AS appKeyBundleId,
  appKeyBundleEntity.authKey
FROM fullAccountEntity
-- keybox
INNER JOIN keyboxEntity
ON keyboxEntity.id = fullAccountEntity.keyboxId
-- spending public keyset
INNER JOIN spendingKeysetEntity
ON keyboxEntity.activeSpendingKeysetId = spendingKeysetEntity.id
-- bundle
INNER JOIN appKeyBundleEntity
ON keyboxEntity.activeKeyBundleId = appKeyBundleEntity.id;

-- 4. Drop `activeKeyboxEntity` and `onboardingKeyboxEntity` tables, and `keyboxView`
DROP TABLE activeKeyboxEntity;
DROP TABLE onboardingKeyboxEntity;
DROP VIEW keyboxView;

-- 5. Run foreign keys check
PRAGMA foreign_key_check;
