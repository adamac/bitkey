import build.wallet.bitkey.socrec.ProtectedCustomerAlias;
import build.wallet.bitkey.socrec.TrustedContactAlias;
import build.wallet.bitkey.socrec.TrustedContactAuthenticationState;
import build.wallet.bitkey.socrec.TrustedContactEnrollmentPakeKey;
import build.wallet.bitkey.socrec.TrustedContactIdentityKey;
import kotlinx.datetime.Instant;
import okio.ByteString;

CREATE TABLE socRecTrustedContactEntity(
  rowId                   INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  recoveryRelationshipId  TEXT UNIQUE NOT NULL,
  trustedContactAlias     TEXT AS TrustedContactAlias NOT NULL,
  authenticationState     TEXT AS TrustedContactAuthenticationState NOT NULL CHECK (authenticationState IN ('AWAITING_VERIFY', 'VERIFIED', 'TAMPERED')),
  certificate             TEXT NOT NULL
);

CREATE TABLE socRecProtectedCustomerEntity(
  rowId                   INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  recoveryRelationshipId  TEXT UNIQUE NOT NULL,
  alias                   TEXT AS ProtectedCustomerAlias NOT NULL
);

CREATE TABLE socRecTrustedContactInvitationEntity(
  rowId                   INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  recoveryRelationshipId  TEXT UNIQUE NOT NULL,
  trustedContactAlias     TEXT AS TrustedContactAlias NOT NULL,
  token                   TEXT NOT NULL,
  tokenBitLength          INTEGER NOT NULL,
  expiresAt               INTEGER AS Instant NOT NULL
);

CREATE TABLE socRecUnendorsedTrustedContactEntity(
  rowId                        INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  recoveryRelationshipId       TEXT UNIQUE NOT NULL,
  trustedContactAlias          TEXT AS TrustedContactAlias NOT NULL,
  enrollmentPakeKey            TEXT AS TrustedContactEnrollmentPakeKey NOT NULL,
  enrollmentKeyConfirmation    BLOB AS ByteString NOT NULL,
  sealedDelegatedDecryptionKey TEXT NOT NULL,
  authenticationState          TEXT AS TrustedContactAuthenticationState NOT NULL
);

insertSocRecTrustedContactInvitation:
INSERT OR REPLACE INTO socRecTrustedContactInvitationEntity(recoveryRelationshipId, trustedContactAlias, token, tokenBitLength, expiresAt)
VALUES(?, ?, ?, ?, ?);

getSocRecTrustedContactInvitations:
SELECT * FROM socRecTrustedContactInvitationEntity
-- Arbitrary but stable sort
ORDER BY recoveryRelationshipId;

insertSocRecTrustedContact:
INSERT OR REPLACE INTO socRecTrustedContactEntity(recoveryRelationshipId, trustedContactAlias, authenticationState, certificate)
VALUES(:recoveryRelationshipId, :trustedContactAlias, :authenticationState, :certificate);

getSocRecTrustedContacts:
SELECT * FROM socRecTrustedContactEntity
-- Arbitrary but stable sort
ORDER BY recoveryRelationshipId;

insertSocRecProtectedCustomer:
INSERT OR REPLACE INTO socRecProtectedCustomerEntity(recoveryRelationshipId, alias)
VALUES(?, ?);

getSocRecProtectedCustomers:
SELECT * FROM socRecProtectedCustomerEntity
-- Arbitrary but stable sort
ORDER BY recoveryRelationshipId;

insertSocRecUnendorsedTrustedContact:
INSERT OR REPLACE INTO socRecUnendorsedTrustedContactEntity(
    recoveryRelationshipId,
    trustedContactAlias,
    enrollmentPakeKey,
    enrollmentKeyConfirmation,
    sealedDelegatedDecryptionKey,
    authenticationState
)
VALUES(?, ?, ?, ?, ?, ?);

getSocRecUnendorsedTrustedContacts:
SELECT * FROM socRecUnendorsedTrustedContactEntity
-- Arbitrary but stable sort
ORDER BY recoveryRelationshipId;

setSocRecUnendorsedTrustedContactAuthenticationState:
UPDATE socRecUnendorsedTrustedContactEntity
SET authenticationState = ?
WHERE recoveryRelationshipId = ?;

clearSocRecTrustedContactInvitations:
DELETE FROM socRecTrustedContactInvitationEntity;

clearSocRecTrustedContacts:
DELETE FROM socRecTrustedContactEntity;

clearSocRecProtectedCustomers:
DELETE FROM socRecProtectedCustomerEntity;

clearSocRecUnendorsedTrustedContacts:
DELETE FROM socRecUnendorsedTrustedContactEntity;

clear {
  DELETE FROM socRecTrustedContactEntity;
  DELETE FROM socRecProtectedCustomerEntity;
  DELETE FROM socRecTrustedContactInvitationEntity;
  DELETE FROM socRecUnendorsedTrustedContactEntity;
}

