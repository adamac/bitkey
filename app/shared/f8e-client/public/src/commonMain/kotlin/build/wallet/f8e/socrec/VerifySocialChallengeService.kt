package build.wallet.f8e.socrec

import build.wallet.bitkey.account.Account
import build.wallet.encrypt.XCiphertext
import build.wallet.f8e.socrec.models.ChallengeVerificationResponse
import build.wallet.ktor.result.NetworkingError
import com.github.michaelbull.result.Result

/**
 * Verify the social challenge of a protected customer as a trusted contact
 */
interface VerifySocialChallengeService {
  /**
   * Verify the active social challenge by providing the code sent by the protect customer.
   * The response contains the keys necessary for encrypting the shared secret.
   *
   * @param f8eEnvironment - the f8e environment to use for the challenge verification
   * @param accountId - the account id of the trusted contact
   * @param recoveryRelationshipId - the recovery relationship id of the protected customer <> trusted contact
   * @param code - the code sent by the protected customer to the trusted contact
   */
  suspend fun verifyChallenge(
    account: Account,
    recoveryRelationshipId: String,
    code: String,
  ): Result<ChallengeVerificationResponse, NetworkingError>

  /**
   * Respond to the social challenge by providing the shared secret for the active challenge
   *
   * @param f8eEnvironment - the f8e environment to use for the challenge verification
   * @param accountId - the account id of the trusted contact
   * @param socialChallengeId - the id of the current active social challenge, provided in [ChallengeVerificationResponse]
   * @param sharedSecretCiphertext - encrypted text, generated by using keys from [ChallengeVerificationResponse]
   */
  suspend fun respondToChallenge(
    account: Account,
    socialChallengeId: String,
    sharedSecretCiphertext: XCiphertext,
  ): Result<Unit, NetworkingError>
}
